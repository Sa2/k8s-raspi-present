いまさらラズパイでおうちk8sを構築した話

15 Nov 2020

佐藤聖也

* お話すること

- おうちk8sとは？+なんでやろうと思ったか
- 物理構築のお話
- OSのセットアップ
- ソフトウェアの構築のお話

* おうちk8sとは？

そのままで、自宅にKubernetesクラスターを作ることを指す

.image image/eyecatch.jpg 420 560

↑ こんな感じのやつ

* なんで構築したの？ EKSとかGKEとかあるじゃん？

- GKEの無料枠を結構昔に使い切っちゃった（Spannerで遊んだせい）
- 運用する側の仕組みも気になった
- 自前構築すれば0円
- 今や一家に一台k8sクラスタの時代だし

* 物理の構築

* パーツ一覧

.image image/parts_table1.png

PS5通常版と同じくらい！
SDカードリーダーとmini-HDMI -> HDMI変換器は持ってた

* 届いたパーツたち

.image image/pic01_parts.jpg 420 560

大体アマゾンで買えます
ラズパイだけ正規代理店で買った

* 物理組み立て中思ったこと

- 電源がUSB Type-C なのは良い
- 最低5.1V / 3A DC最低1A が必要
- なぜ mini HDMI にした。。。
- ラズパイ4 はヒートシンク or ファンが必須
- 大体ケースにヒートシンクかファンが付属している
- ラズパイにヒートシンクやファンってどうなの？

* OSのセットアップ

* OSをSDカードに焼く1

- RAMが8GBなので64bit版のRaspberry Pi OSを使う
- 64bit版だし docker image って結構かさばるので64GBのSDカードを使った

* OSをSDカードに焼く2（地雷を踏む）

調べてて見つけた地雷

- 32GB以上をフォーマットする場合 *exFAT* になる
- ラズパイのOSを焼くのに使うNOOBSというツールはexFATを *サポートしない*
- 当然FAT32は32GB以上のサイズでフォーマットできない



* OSをSDカードに焼く3（時代の進歩を感じた）

ちゃんとそれには気づいていたらしい

- 2020年春に Raspberry Pi Imager というツールが出ている
- これは64GB以上のSDカードも扱うことができる
- これを使えばフォーマット+イメージ焼きをやってくれるから簡単

* OSインストール後にやること

- キーボード設定（UK配列になってた）
- セキュリティ周りの設定をする（パスワード変更、sudo周りとか）
- デフォルトパスワードが固定なので変えないと危ない
- `/boot` に `ssh` ディレクトリを作成するとsshサーバーが使えるようになる
- なおこれはSDカードにMacなりWindowsなりから書き込んでもできるらしい

* ここまでで構築したものの図

.image image/pic04_physical.png

構成自体は至ってシンプル

* ソフトウェアの構築のお話

* k8sの構成

.image image/pic02_control_plane.png 456 1000

コンポーネントはかなりある

* k8sの構成

コントロールプレーンコンポーネント

- kube-apiserver
- etcd
- kube-scheduler
- kube-controller-manager
- cloud-controller-manager

基本的にこれらは水平スケールが可能

* kube-apiserver

Kubernetes API を提供している

図の通りほぼすべての操作はこのコンポーネント経由で行われている

kubectl でコマンドを叩くとkubectlがkube-apiserverを叩いている

.image image/pic02_control_plane.png 364 800

* etcd

一貫性、高可用性を持ったキーバリューストア
k8sすべてのクラスター情報の保存場所

* kube-scheduler

新しく作られたPodにノードが割り当てられているか監視し、割り当てられていなかった場合にそのPodを実行するノードを選択している
Podが要求するリソースの量や、データの局所性、Podに設定された制約など色々な条件を組合わせてノードを選択している賢い子

* kube-controller-manager

複数のコントローラープロセスを実行している
実行すると複数の論理プロセスを実行しているが単一バイナリとしてコンパイルされる

- ノードコントローラー：ノードがダウンした場合の通知と対応を担当
- レプリケーションコントローラー：システム内の全レプリケーションコントローラーオブジェクトについて、Podの数を正しく保つ役割を持つ
- エンドポイントコントローラー：エンドポイントオブジェクトを注入する(ServiceとPodを紐付ける)
- サービスアカウントとトークンコントローラー：新規の名前空間に対して、デフォルトアカウントとAPIアクセストークンを作成します


* cloud-controller-manager

クラウド特有の制御ロジックを組み込むコンポーネント
KubernetesをオンプレミスあるいはPC内で動かす場合クラスターにcloud container managerはない

今回は使わないが以下のコントローラーがある

- ノードコントローラー：ノードが応答を停止した後、クラウドで削除されたかどうかを判断するため、クラウドプロバイダーをチェックする
- ルーティングコントローラー：基盤であるクラウドインフラでルーティングを設定する
- サービスコントローラー：クラウドプロバイダーのロードバランサーの作成、更新、削除を行う


* k8sの構成

ノードコンポーネント

- kubelet
- kube-proxy
- コンテナランタイム

* kubelet

各コンテナがPodで実行されていることを保証する
Kubernetesによって作成されたものでないコンテナは除く

* kube-proxy

各nodeで動作しているネットワークプロキシ
KubernetesのServiceコンセプトの一部を実装している

* コンテナランタイム

コンテナの実行を担当するソフトウェア
複数のコンテナランタイムをサポートしている

- docker
- containerd
- CRI-O

* k8sの構成

.image image/pic03_control_plane.png 456 1000

緑の枠がmaster nodeに必要なコンポーネント


* k8sの構築

k8sを構築するのに必要なモジュール

- docker 
- kubelet
- kubeadm
- kubectl

これらをマスター/ワーカーすべてに入れる

* kubeadm?

Kubernetesのベストプラクティスに準拠した最小限の構成を自動的に構築してくれるすごいやつ！

こいつがコントロールプレーンコンポーネントをコンテナで構築したり、ワーカーをマスターへつなげてくれたりkube-proxyを構築してくれる！

参考にした文献

.link https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ Kubeadmを使用したシングルコントロールプレーンクラスターの作成

.link https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ kubeadmのインストール

kubeadmのインストール は必ず読むべき
ハードウェア要件だけではなく、iptablesがブリッジを通過するトラフィックを処理できるようにするなど、細かい要件が書かれている


* モジュールをインストール

すべてのノードに docker kubelet kubeadm kubectl をインストールする

コマンドはネットに散乱してるので割愛します
というかほとんどansible化しているのであまりコマンドを叩いてない


基本的にリポジトリを登録して、aptやyumからインストールが可能

アーキテクチャが `arm64` であることに注意が必要
kubernetesの公式ページなどのコマンドをコピると `x86_64` になっているのが基本なのできちんと確認すべし

ここまで来ればk8sクラスターの準備完了

* k8sクラスターを起動（Master）

kubeadm init で master を起動

```
sudo kubeadm init --pod-network-cidr=10.244.0.0/16
```

--pod-network-cidr=10.244.0.0/16 はネットワーク・ファブリックの Flannel の要件

* k8sクラスターを起動（Master）

ログにetcdやapiserverなどコントロールプレーンを構築、設定している様が出力される

他にはCoreDNS、kube-proxyといったaddonをセットアップしている情報も出力される

CoreDNSはサービスディスカバリの役割を持つ

最後にその他やるべきことが出力される

* k8sクラスターを起動（Master）

.code logs/kube-init.log

* k8sクラスターを起動（Master）

書いてあることは

- .kube/config を設定して kubectl コマンドを使えるようにする
- ネットワーク・ファブリックをインストールする
- 書くworkerノードで kubeadm join コマンドを実行する

* k8sクラスターを起動（Master）

ネットワークファブリックにFlannelを使った理由

- 情報が多い
- 軽量かつシンプル
- ARMに対応してるものが少なかったりする
- CalicoとかはAMD64しか対応してないという記事をどこかで見た

* k8sクラスターを起動（Worker）
